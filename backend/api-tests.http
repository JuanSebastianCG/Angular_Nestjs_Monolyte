###############################################################################
# API Testing File for University Management System
# 
# Setup Environment Variables:
# - baseUrl: The base URL of the API
# - authToken: Automatically set after login
# - adminToken: Token with admin privileges, set after admin login
# - userId: User ID to use in requests
# - departmentId: Department ID to use in requests
###############################################################################

@baseUrl = http://localhost:3000/api

###############################################################################
# AUTHENTICATION
###############################################################################

### Register a new student user
# @name registerStudent
POST {{baseUrl}}/users
Content-Type: application/json

{
  "name": "Student Name",
  "birthDate": "2000-01-01",
  "username": "studentuser",
  "email": "student@example.com",
  "password": "password123",
  "role": "student",
  "studentInfo": {
    "enrollmentDate": "2023-09-01"
  }
}

### Register a new professor user
# @name registerProfessor
POST {{baseUrl}}/users
Content-Type: application/json

{
  "name": "Professor Name",
  "birthDate": "1980-01-01",
  "username": "professoruser",
  "email": "professor@example.com",
  "password": "password123",
  "role": "professor",
  "professorInfo": {
    "departmentId": "{{departmentId}}",
    "hiringDate": "2023-01-15"
  }
}

### Login as student user
# @name login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "username": "studentuser",
  "password": "password123"
}

### Automatically set tokens after login
@authToken = {{login.response.body.access_token}}
@refreshToken = {{login.response.body.refresh_token}}
@userId = {{login.response.body.user.id}}

### Refresh token
# @name refreshToken
POST {{baseUrl}}/auth/refresh
Authorization: Bearer {{refreshToken}}

### Register admin user (requires existing admin token)
# @name registerAdmin
POST {{baseUrl}}/users/admin
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Admin User",
  "birthDate": "1990-01-01",
  "username": "adminuser",
  "email": "admin@example.com",
  "password": "password123"
}

### Login as admin
# @name loginAdmin
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "username": "adminuser",
  "password": "password123"
}

### Set admin token
@adminToken = {{loginAdmin.response.body.access_token}}

### Get user profile
GET {{baseUrl}}/auth/profile
Authorization: Bearer {{authToken}}

### Logout
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{authToken}}

###############################################################################
# USER MANAGEMENT
###############################################################################

### Get all users (admin only)
# @name getAllUsers
GET {{baseUrl}}/users
Authorization: Bearer {{adminToken}}

### Get user by ID
GET {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{authToken}}

### Update user with student info
PATCH {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated Student Name",
  "studentInfo": {
    "enrollmentDate": "2023-09-01"
  }
}

### Update user with professor info
PATCH {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated Professor Name",
  "professorInfo": {
    "departmentId": "{{departmentId}}",
    "hiringDate": "2023-06-15"
  }
}

### Admin update any user
# @name adminUpdateUser
PATCH {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Updated by Admin"
}

### Delete user (admin only)
DELETE {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{adminToken}}

###############################################################################
# DEPARTMENTS
###############################################################################

### Create a department
# @name createDepartment
POST {{baseUrl}}/departments
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Computer Science",
  "description": "Study of computers and computational systems"
}

# Set department ID from response
@departmentId = {{createDepartment.response.body._id}}

### Get all departments
GET {{baseUrl}}/departments
Authorization: Bearer {{authToken}}

### Get department by ID
GET {{baseUrl}}/departments/{{departmentId}}
Authorization: Bearer {{authToken}}

### Update department
PATCH {{baseUrl}}/departments/{{departmentId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated Computer Science",
  "description": "Updated description"
}

### Delete department
DELETE {{baseUrl}}/departments/{{departmentId}}
Authorization: Bearer {{authToken}}

###############################################################################
# STUDENTS
###############################################################################

### Create a student
# @name createStudent
POST {{baseUrl}}/students
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "userId": "{{userId}}",
  "enrollmentDate": "2023-09-01"
}

# Set student ID from response
@studentId = {{createStudent.response.body._id}}

### Get all students
GET {{baseUrl}}/students
Authorization: Bearer {{authToken}}

### Get student by ID
GET {{baseUrl}}/students/{{studentId}}
Authorization: Bearer {{authToken}}

### Get student by user ID
GET {{baseUrl}}/students/user/{{userId}}
Authorization: Bearer {{authToken}}

###############################################################################
# PROFESSORS
###############################################################################

### Create a professor
# @name createProfessor
POST {{baseUrl}}/professors
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "userId": "{{userId}}",
  "departmentId": "{{departmentId}}",
  "hiringDate": "2023-01-15"
}

# Set professor ID from response
@professorId = {{createProfessor.response.body._id}}

### Get all professors
GET {{baseUrl}}/professors
Authorization: Bearer {{authToken}}

### Get professor by ID
GET {{baseUrl}}/professors/{{professorId}}
Authorization: Bearer {{authToken}}

### Get professor by user ID
GET {{baseUrl}}/professors/user/{{userId}}
Authorization: Bearer {{authToken}}

###############################################################################
# COURSES
###############################################################################

### Create a course
# @name createCourse
POST {{baseUrl}}/courses
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Introduction to Programming",
  "code": "CS101",
  "credits": 3,
  "description": "Basic programming concepts",
  "departmentId": "{{departmentId}}",
  "professorId": "{{professorId}}"
}

# Set course ID from response
@courseId = {{createCourse.response.body._id}}

### Get all courses
GET {{baseUrl}}/courses
Authorization: Bearer {{authToken}}

### Get course by ID
GET {{baseUrl}}/courses/{{courseId}}
Authorization: Bearer {{authToken}}

### Update course
PATCH {{baseUrl}}/courses/{{courseId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated Introduction to Programming",
  "description": "Updated course description"
}

### Delete course
DELETE {{baseUrl}}/courses/{{courseId}}
Authorization: Bearer {{authToken}}

###############################################################################
# ENROLLMENTS
###############################################################################

### Create an enrollment
# @name createEnrollment
POST {{baseUrl}}/enrollments
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "studentId": "{{studentId}}",
  "courseId": "{{courseId}}",
  "enrollmentDate": "2023-09-05",
  "status": "active"
}

### Get all enrollments
GET {{baseUrl}}/enrollments
Authorization: Bearer {{authToken}}

### Get enrollments by student
GET {{baseUrl}}/enrollments/student/{{studentId}}
Authorization: Bearer {{authToken}}

### Get enrollments by course
GET {{baseUrl}}/enrollments/course/{{courseId}}
Authorization: Bearer {{authToken}}

### Get specific enrollment
GET {{baseUrl}}/enrollments/{{studentId}}/{{courseId}}
Authorization: Bearer {{authToken}}

### Update enrollment
PATCH {{baseUrl}}/enrollments/{{studentId}}/{{courseId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "status": "completed",
  "completionDate": "2023-12-15"
}

### Delete enrollment
DELETE {{baseUrl}}/enrollments/{{studentId}}/{{courseId}}
Authorization: Bearer {{authToken}}

###############################################################################
# EVALUATIONS
###############################################################################

### Create an evaluation
# @name createEvaluation
POST {{baseUrl}}/evaluations
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "courseId": "{{courseId}}",
  "title": "Midterm Exam",
  "description": "Covers chapters 1-5",
  "date": "2023-10-15",
  "maxGrade": 100,
  "weight": 30
}

# Set evaluation ID from response
@evaluationId = {{createEvaluation.response.body._id}}

### Get all evaluations
GET {{baseUrl}}/evaluations
Authorization: Bearer {{authToken}}

### Get evaluations by course
GET {{baseUrl}}/evaluations/course/{{courseId}}
Authorization: Bearer {{authToken}}

### Get evaluation by ID
GET {{baseUrl}}/evaluations/{{evaluationId}}
Authorization: Bearer {{authToken}}

### Update evaluation
PATCH {{baseUrl}}/evaluations/{{evaluationId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "title": "Updated Midterm Exam",
  "description": "Updated description"
}

### Delete evaluation
DELETE {{baseUrl}}/evaluations/{{evaluationId}}
Authorization: Bearer {{authToken}}

###############################################################################
# STUDENT GRADES
###############################################################################

### Create a student grade
# @name createStudentGrade
POST {{baseUrl}}/student-grades
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "studentId": "{{studentId}}",
  "evaluationId": "{{evaluationId}}",
  "grade": 85,
  "comments": "Good work!"
}

### Get all student grades
GET {{baseUrl}}/student-grades
Authorization: Bearer {{authToken}}

### Get grades by student
GET {{baseUrl}}/student-grades/student/{{studentId}}
Authorization: Bearer {{authToken}}

### Get grades by evaluation
GET {{baseUrl}}/student-grades/evaluation/{{evaluationId}}
Authorization: Bearer {{authToken}}

### Get specific grade
GET {{baseUrl}}/student-grades/{{evaluationId}}/{{studentId}}
Authorization: Bearer {{authToken}}

### Update student grade
PATCH {{baseUrl}}/student-grades/{{evaluationId}}/{{studentId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "grade": 90,
  "comments": "Excellent performance"
}

### Delete student grade
DELETE {{baseUrl}}/student-grades/{{evaluationId}}/{{studentId}}
Authorization: Bearer {{authToken}} 