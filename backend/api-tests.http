@baseUrl = http://localhost:3000/api
@authToken = {{login.response.body.access_token}}
@refreshToken = {{login.response.body.refresh_token}}

### Register a new user as a student
# @name registerStudent
POST {{baseUrl}}/users
Content-Type: application/json

{
  "name": "Student Name",
  "birthDate": "2000-01-01",
  "username": "studentuser",
  "email": "student@example.com",
  "password": "password123",
  "role": "student",
  "studentInfo": {}
}

### Register a new user as a professor
# @name registerProfessor
POST {{baseUrl}}/users
Content-Type: application/json

{
  "name": "Professor Name",
  "birthDate": "1980-01-01",
  "username": "professoruse3",
  "email": "professor3@example.com",
  "password": "password123",
  "role": "professor",
  "professorInfo": {
    "departmentId": "{{departmentId}}",
    "hiringDate": "2023-01-15"
  }
}

### Login
# @name login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "username": "studentuser",
  "password": "password123"
}

### Refresh Token
# @name refreshToken
POST {{baseUrl}}/auth/refresh
Authorization: Bearer {{refreshToken}}

### Get all users (with role-specific info)
GET {{baseUrl}}/users
Authorization: Bearer {{authToken}}

### Get user by ID (with role-specific info)
GET {{baseUrl}}/users/userId
Authorization: Bearer {{authToken}}

### Update user (with role-specific info)
PATCH {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated Name",
  "studentInfo": {
    "enrollmentDate": "2023-09-01"
  }
}

### Update user who is a professor
PATCH {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated Professor Name",
  "professorInfo": {
    "departmentId": "{{departmentId}}",
    "hiringDate": "2023-06-15"
  }
}

### Delete user
DELETE {{baseUrl}}/users/userId
Authorization: Bearer {{authToken}}

### Student Endpoints ###

### Get all students
GET {{baseUrl}}/students
Authorization: Bearer {{authToken}}

### Get student by ID
GET {{baseUrl}}/students/studentId
Authorization: Bearer {{authToken}}

### Get student by user ID
GET {{baseUrl}}/students/user/userId
Authorization: Bearer {{authToken}}

### Update student
PATCH {{baseUrl}}/students/userId
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "newName"
}

### Delete student
DELETE {{baseUrl}}/students/studentId
Authorization: Bearer {{authToken}}

### Professor Endpoints ###

### Get all professors
GET {{baseUrl}}/professors
Authorization: Bearer {{authToken}}

### Get professor by ID
GET {{baseUrl}}/professors/professorId
Authorization: Bearer {{authToken}}

### Get professor by user ID
GET {{baseUrl}}/professors/user/userId
Authorization: Bearer {{authToken}}

### Update professor
PATCH {{baseUrl}}/professors/professorId
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "departmentId": "{{departmentId}}",
  "hiringDate": "2023-05-15"
}

### Delete professor
DELETE {{baseUrl}}/professors/professorId
Authorization: Bearer {{authToken}}

### Logout
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{authToken}}

### Departments Endpoints ###

### Create department first
# @name createDepartment
POST {{baseUrl}}/departments
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Computer Science",
  "description": "Department of Computer Science and Engineering"
}

### Save department ID
@departmentId = {{createDepartment.response.body.id}}

### Then create professor with department reference
POST {{baseUrl}}/users
Content-Type: application/json

{
  "name": "Professor Name",
  "birthDate": "1980-01-01",
  "username": "professoruser5",
  "email": "professor5@example.com",
  "password": "password123",
  "role": "professor",
  "professorInfo": {
    "departmentId": "{{departmentId}}",
    "hiringDate": "2023-01-15"
  }
}

### Get all departments
GET {{baseUrl}}/departments

### Get department by ID
GET {{baseUrl}}/departments/departmentId

### Update department
PATCH {{baseUrl}}/departments/departmentId
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "description": "Updated description for Computer Science department"
}

### Delete department
DELETE {{baseUrl}}/departments/departmentId
Authorization: Bearer {{authToken}}

### Schedules Endpoints ###

### Create schedule
POST {{baseUrl}}/schedules
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "startDate": "2023-08-01",
  "endDate": "2023-12-15",
  "daysWeek": "MWF",
  "startHour": "09:00",
  "endHour": "10:30"
}

### Get all schedules
GET {{baseUrl}}/schedules

### Get schedule by ID
GET {{baseUrl}}/schedules/scheduleId

### Update schedule
PATCH {{baseUrl}}/schedules/scheduleId
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "startHour": "09:30",
  "endHour": "11:00"
}

### Delete schedule
DELETE {{baseUrl}}/schedules/scheduleId
Authorization: Bearer {{authToken}}

### Courses Endpoints ###

### Create course
POST {{baseUrl}}/courses
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Introduction to Computer Science",
  "description": "Fundamentals of computer science and programming",
  "professorId": "professorId",
  "scheduleId": "scheduleId"
}

### Get all courses
GET {{baseUrl}}/courses

### Get course by ID
GET {{baseUrl}}/courses/courseId

### Update course
PATCH {{baseUrl}}/courses/courseId
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "description": "Updated course description"
}

### Delete course
DELETE {{baseUrl}}/courses/courseId
Authorization: Bearer {{authToken}}

### Prerequisites Endpoints ###

### Create prerequisite
POST {{baseUrl}}/prerequisites
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "courseId": "courseId",
  "prerequisiteCourseId": "prerequisiteCourseId"
}

### Get all prerequisites
GET {{baseUrl}}/prerequisites

### Get prerequisites for course
GET {{baseUrl}}/prerequisites/course/courseId

### Delete prerequisite
DELETE {{baseUrl}}/prerequisites/courseId/prerequisiteCourseId
Authorization: Bearer {{authToken}}

### Enrollments Endpoints ###

### Create enrollment
POST {{baseUrl}}/enrollments
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "studentId": "studentId",
  "courseId": "courseId",
  "enrollmentStartDate": "2023-08-15"
}

### Get all enrollments
GET {{baseUrl}}/enrollments
Authorization: Bearer {{authToken}}

### Get enrollments by student
GET {{baseUrl}}/enrollments/student/studentId
Authorization: Bearer {{authToken}}

### Get enrollments by course
GET {{baseUrl}}/enrollments/course/courseId
Authorization: Bearer {{authToken}}

### Get specific enrollment
GET {{baseUrl}}/enrollments/studentId/courseId
Authorization: Bearer {{authToken}}

### Update enrollment
PATCH {{baseUrl}}/enrollments/studentId/courseId
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "finalGrade": 85
}

### Delete enrollment
DELETE {{baseUrl}}/enrollments/studentId/courseId
Authorization: Bearer {{authToken}}

### Evaluations Endpoints ###

### Create evaluation
POST {{baseUrl}}/evaluations
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Midterm Exam",
  "description": "Comprehensive midterm exam",
  "evaluationDate": "2023-10-15",
  "maxScore": 100,
  "courseId": "courseId"
}

### Get all evaluations
GET {{baseUrl}}/evaluations
Authorization: Bearer {{authToken}}

### Get evaluations by course
GET {{baseUrl}}/evaluations/course/courseId
Authorization: Bearer {{authToken}}

### Get evaluation by ID
GET {{baseUrl}}/evaluations/evaluationId
Authorization: Bearer {{authToken}}

### Update evaluation
PATCH {{baseUrl}}/evaluations/evaluationId
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "description": "Updated exam description"
}

### Delete evaluation
DELETE {{baseUrl}}/evaluations/evaluationId
Authorization: Bearer {{authToken}}

### Student Grades Endpoints ###

### Create student grade
POST {{baseUrl}}/student-grades
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "evaluationId": "evaluationId",
  "studentId": "studentId",
  "grade": 85,
  "comments": "Good work"
}

### Get all student grades
GET {{baseUrl}}/student-grades
Authorization: Bearer {{authToken}}

### Get grades by student
GET {{baseUrl}}/student-grades/student/studentId
Authorization: Bearer {{authToken}}

### Get grades by evaluation
GET {{baseUrl}}/student-grades/evaluation/evaluationId
Authorization: Bearer {{authToken}}

### Get specific grade
GET {{baseUrl}}/student-grades/evaluationId/studentId
Authorization: Bearer {{authToken}}

### Update student grade
PATCH {{baseUrl}}/student-grades/evaluationId/studentId
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "grade": 90,
  "comments": "Excellent performance"
}

### Delete student grade
DELETE {{baseUrl}}/student-grades/evaluationId/studentId
Authorization: Bearer {{authToken}}

### Update a professor by user ID
PATCH {{baseUrl}}/professors/user/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "departmentId": "{{departmentId}}",
  "hiringDate": "2023-05-15"
}

### Update a student by user ID
PATCH {{baseUrl}}/students/user/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "enrollmentDate": "2023-09-01"
} 